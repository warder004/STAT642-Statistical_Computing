import sklearn
import numpy as np
from sklearn import linear_model
from numpy import zeros, loadtxt
import matplotlib.pyplot as plt

# predimension the array (totally cheating here)

X = zeros((5,1000,100))
Y = zeros((1000,5))

# Load the data files into the array

X[0,:,:] = loadtxt("DataX0.txt")
Y[:,0] = loadtxt("DataY0.txt")

X[1,:,:] = loadtxt("DataX1.txt")
Y[:,1] = loadtxt("DataY1.txt")

X[2,:,:] = loadtxt("DataX2.txt")
Y[:,2] = loadtxt("DataY2.txt")

X[3,:,:] = loadtxt("DataX3.txt",)
Y[:,3] = loadtxt("DataY3.txt")

X[4,:,:] = loadtxt("DataX4.txt")
Y[:,4] = loadtxt("DataY4.txt")


# Dataset 0 code

clf_O_set0 = linear_model.LinearRegression()
clf_O_set0.fit(X[0,:,:],Y[:,0])

clf_R_set0 = linear_model.Ridge(alpha=0.5)
clf_R_set0.fit(X[0,:,:],Y[:,0])

clf_L_set0 = linear_model.Lasso(alpha=0.5)
clf_L_set0.fit(X[0,:,:],Y[:,0])

clf_E_set0 = linear_model.ElasticNet(alpha=0.5,l1_ratio=0.5)
clf_E_set0.fit(X[0,:,:],Y[:,0])

# Dataset 1 code

clf_O_set1 = linear_model.LinearRegression()
clf_O_set1.fit(X[1,:,:],Y[:,1])

clf_R_set1 = linear_model.Ridge(alpha=0.5)
clf_R_set1.fit(X[1,:,:],Y[:,1])

clf_L_set1 = linear_model.Lasso(alpha=0.5)
clf_L_set1.fit(X[1,:,:],Y[:,1])

clf_E_set1 = linear_model.ElasticNet(alpha=0.5,l1_ratio=0.5)
clf_E_set1.fit(X[1,:,:],Y[:,1])

# Dataset 2 code

clf_O_set2 = linear_model.LinearRegression()
clf_O_set2.fit(X[2,:,:],Y[:,2])

clf_R_set2 = linear_model.Ridge(alpha=0.5)
clf_R_set2.fit(X[2,:,:],Y[:,2])

clf_L_set2 = linear_model.Lasso(alpha=0.5)
clf_L_set2.fit(X[2,:,:],Y[:,2])

clf_E_set2 = linear_model.ElasticNet(alpha=0.5,l1_ratio=0.5)
clf_E_set2.fit(X[2,:,:],Y[:,2])

# Dataset 3 code

clf_O_set3 = linear_model.LinearRegression()
clf_O_set3.fit(X[3,:,:],Y[:,3])

clf_R_set3 = linear_model.Ridge(alpha=0.5)
clf_R_set3.fit(X[3,:,:],Y[:,3])

clf_L_set3 = linear_model.Lasso(alpha=0.5)
clf_L_set3.fit(X[3,:,:],Y[:,3])

clf_E_set3 = linear_model.ElasticNet(alpha=0.5,l1_ratio=0.5)
clf_E_set3.fit(X[3,:,:],Y[:,3])

# Dataset 4 code

clf_O_set4 = linear_model.LinearRegression()
clf_O_set4.fit(X[4,:,:],Y[:,4])

clf_R_set4 = linear_model.Ridge(alpha=0.5)
clf_R_set4.fit(X[4,:,:],Y[:,4])

clf_L_set4 = linear_model.Lasso(alpha=0.5)
clf_L_set4.fit(X[4,:,:],Y[:,4])

clf_E_set4 = linear_model.ElasticNet(alpha=0.5,l1_ratio=0.5)
clf_E_set4.fit(X[4,:,:],Y[:,4])

# THIS IS THE START OF MY CODE

# Segment data into 5 sets
XRef = {}
YRef = {}
k = 0
while k < 5:
    XRef[k] = X[k,:,:]
    YRef[k] = Y[:,k]
    k +=1

# Select dataset to use
j = 4
xData = XRef[j]
yData = YRef[j]

# Create the correlation matrix and heatmap 
corrMatrix = np.corrcoef(xData, rowvar = 0)
plt.imshow(corrMatrix, cmap='hot', interpolation='none', vmin=0, vmax=1)
plt.title("Data Set {} Correlation Heatmap".format(j))
plt.colorbar()
plt.savefig('Heatmap_{}.png'.format(j), format='png')
plt.show()

# Divide out the small dataset
sX = xData[0:100,:]
sY = yData[0:100]

sTestX= sX[0:50,:]
sTrainX= sX[50:75,:]
sValidX= sX[75:100,:]
sTestY = sY[0:50]
sTrainY = sY[50:75]
sValidY = sY[75:100]

# Divide out the large dataset
testX = xData[0:500,:]
trainX = xData[500:750,:]
validX = xData[750:1000,:]
testY = yData[0:500]
trainY = yData[500:750]
validY = yData[750:1000]

#-------------------------------
#       OLS REGRESSION
#-------------------------------

#OLS Regression, store coefficients in coeffs
clf = linear_model.LinearRegression()

clf.fit(sTrainX, sTrainY)
sYHatTest = clf.predict(sTestX)
sYHatTrain = clf.predict(sTrainX)
sCoeffs = clf.coef_

clf.fit(trainX, trainY)
yHatTest = clf.predict(testX)
yHatTrain = clf.predict(trainX)
coeffs = clf.coef_

#--------------------------------
#       OLS RESIDUALS
#--------------------------------

# Calculate and graph histogram of residuals.
# Small Dataset
sTrainResids = np.abs(sYHatTrain-sTrainY)
plt.hist(sTrainResids, bins=5, histtype='stepfilled', normed=True, color='b')
plt.title("Small Train Data Residual Histogram")
plt.xlabel("Residual")
plt.ylabel("Frequency")
plt.savefig('sOLSTrainResiduals_{}.pdf'.format(j), format='pdf')
plt.show()

sTestResids = np.abs(sYHatTest-sTestY)
plt.hist(sTestResids, bins=5, histtype='stepfilled', normed=True, color='g')
plt.title("Small Test Data Residual Histogram")
plt.xlabel("Residual")
plt.ylabel("Frequency")
plt.savefig('sOLSTestResiduals_{}.pdf'.format(j), format='pdf')
plt.show()

# Large Dataset
trainResids = np.abs(yHatTrain-trainY)
testResids = np.abs(yHatTest-testY)
plt.hist(trainResids, bins=5, histtype='stepfilled', normed=True, color='b', label="Train")
plt.hist(testResids, bins=5, histtype='stepfilled', normed=True, color='g', alpha=0.7, label="Test")
plt.title("Large Data Residual Histogram")
plt.xlabel("Residual")
plt.ylabel("Frequency")
plt.legend()
plt.savefig('OLSResiduals_{}.pdf'.format(j), format = 'pdf')

#-----------------------------------
#       RIDGE REG SMALL
#-----------------------------------

# Ridge Regression SMALL (Well commented)
# Set stopping tolerance
tol = .0001
# Create lists to store MSE and alphas to plot later
sTrainRidgeMSE = []
sValidRidgeMSE = []
sTestRidgeMSE = []
allAlpha = []
#  Initialize bounds of r
minR = -5
maxR = 5

for r in np.linspace(maxR,minR,100):
        # Set alpha according to r and store alpha
        currentAlpha = np.exp(r)
        allAlpha.append(currentAlpha)
        # Run Ridge Regression using training data
        clf = linear_model.Ridge(alpha = currentAlpha, fit_intercept=True).fit(sTrainX, sTrainY)
        # Predict yhats of 3 datasets, using trained model
        sYHatTrainRidge = clf.predict(sTrainX)
        sYHatValidRidge = clf.predict(sValidX)
        sYHatTestRidge = clf.predict(sTestX)
        # Calculate MSE for 3 sets
        STRMSE = sklearn.metrics.mean_squared_error(sTrainY, sYHatTrainRidge)
        SVRMSE = sklearn.metrics.mean_squared_error(sValidY, sYHatValidRidge)
        SERMSE = sklearn.metrics.mean_squared_error(sTestY, sYHatTestRidge)
        #Store MSEs
        sTrainRidgeMSE.append(STRMSE)
        sValidRidgeMSE.append(SVRMSE)
        sTestRidgeMSE.append(SERMSE)
        
        # Find index of best Validation MSE and assign best Alpha by the index
        indexMSE = sValidRidgeMSE.index(min(sValidRidgeMSE))
        bestAlpha = allAlpha[indexMSE]
plt.plot(allAlpha, sTrainRidgeMSE, label='Train')
plt.plot(allAlpha, sTestRidgeMSE, label = 'Test')
plt.plot(allAlpha, sValidRidgeMSE, label = 'Valid')
plt.title('Small Ridge Regression')
plt.xlabel('Alpha')
plt.ylabel('MSE')
plt.legend()
plt.savefig('SmallRidgeMSE_{}.pdf'.format(j), format = 'pdf')
plt.show()

# Initialize r zooming adjustment
offset = 1.0
# While the range is > the tolerance
while np.abs(maxR-minR)>tol:
    # Increment r through range
    for r in np.linspace(maxR,minR,100):
        # Set alpha according to r and store alpha
        currentAlpha = np.exp(r)
        allAlpha.append(currentAlpha)
        # Run Ridge Regression using training data
        clf = linear_model.Ridge(alpha = currentAlpha, fit_intercept=True).fit(sTrainX, sTrainY)
        # Predict yhats of 3 datasets, using trained model
        sYHatTrainRidge = clf.predict(sTrainX)
        sYHatValidRidge = clf.predict(sValidX)
        sYHatTestRidge = clf.predict(sTestX)
        # Calculate MSE for 3 sets
        STRMSE = sklearn.metrics.mean_squared_error(sTrainY, sYHatTrainRidge)
        SVRMSE = sklearn.metrics.mean_squared_error(sValidY, sYHatValidRidge)
        SERMSE = sklearn.metrics.mean_squared_error(sTestY, sYHatTestRidge)
        #Store MSEs
        sTrainRidgeMSE.append(STRMSE)
        sValidRidgeMSE.append(SVRMSE)
        sTestRidgeMSE.append(SERMSE)
        
        # Find index of best Validation MSE and assign best Alpha by the index
        indexMSE = sValidRidgeMSE.index(min(sValidRidgeMSE))
        bestAlpha = allAlpha[indexMSE]
    # Adjust r to either side of r's for best alpha    
    minR = np.log(bestAlpha) + offset
    maxR = np.log(bestAlpha) - offset
    # Reduce offset
    offset = offset/5.0

#--------------------------------------
#            RIDGE SMALL RESID
#--------------------------------------
bins = 5

# Small Dataset
sTrainResids = np.abs(sYHatTrainRidge-sTrainY)
plt.hist(sTrainResids, bins=bins, histtype='stepfilled', normed=True, color='b')
plt.title("Small Ridge Train Residual Histogram")
plt.xlabel("Residual")
plt.ylabel("Frequency")
plt.savefig('sRidgeTrainResiduals_{}.pdf'.format(j), format='pdf')
plt.show()

sTestResids = np.abs(sYHatTestRidge-sTestY)
plt.hist(sTestResids, bins=bins, histtype='stepfilled', normed=True, color='g')
plt.title("Small Ridge Test Residual Histogram")
plt.xlabel("Residual")
plt.ylabel("Frequency")
plt.savefig('sRidgeTestResiduals_{}.pdf'.format(j), format='pdf')
plt.show()

sValidResids = np.abs(sYHatValidRidge-sValidY)
plt.hist(sValidResids, bins=bins, histtype='stepfilled', normed=True, color='r')
plt.title("Small Ridge Valid Residual Histogram")
plt.xlabel("Residual")
plt.ylabel("Frequency")
plt.savefig('sRidgeValidResiduals_{}.pdf'.format(j), format='pdf')
plt.show()

#----------------------------------
#       RIDGE REG LARGE
#----------------------------------

# Ridge Regression LARGE
tol = .0001
trainRidgeMSE = []
validRidgeMSE = []
testRidgeMSE = []
allAlpha = []
minR = -3
maxR = 3
offset = 1.0

for r in np.linspace(maxR,minR,100):
    
        currentAlpha = np.exp(r)
        allAlpha.append(currentAlpha)
        clf = linear_model.Ridge(alpha = currentAlpha, fit_intercept=True).fit(trainX, trainY)
    
        yHatTrainRidge = clf.predict(trainX)
        yHatValidRidge = clf.predict(validX)
        yHatTestRidge = clf.predict(testX)
        
        TRMSE = sklearn.metrics.mean_squared_error(trainY, yHatTrainRidge)
        VRMSE = sklearn.metrics.mean_squared_error(validY, yHatValidRidge)
        ERMSE = sklearn.metrics.mean_squared_error(testY, yHatTestRidge)
        
        trainRidgeMSE.append(TRMSE)
        validRidgeMSE.append(VRMSE)
        testRidgeMSE.append(ERMSE)
    
        indexMSE = validRidgeMSE.index(min(validRidgeMSE))
        bestAlpha = allAlpha[indexMSE]
plt.plot(allAlpha, trainRidgeMSE, label='Train')
plt.plot(allAlpha, testRidgeMSE, label = 'Test')
plt.plot(allAlpha, validRidgeMSE, label = 'Valid')
plt.title('Large Ridge Regression')
plt.xlabel('Alpha')
plt.ylabel('MSE')
plt.legend()
plt.savefig('LargeRidgeMSE_{}.pdf'.format(j), format = 'pdf')
plt.show()

while np.abs(maxR-minR)>tol:
    for r in np.linspace(maxR,minR,100):
    
        currentAlpha = np.exp(r)
        allAlpha.append(currentAlpha)
        clf = linear_model.Ridge(alpha = currentAlpha, fit_intercept=True).fit(trainX, trainY)
    
        yHatTrainRidge = clf.predict(trainX)
        yHatValidRidge = clf.predict(validX)
        yHatTestRidge = clf.predict(testX)
        
        TRMSE = sklearn.metrics.mean_squared_error(trainY, yHatTrainRidge)
        VRMSE = sklearn.metrics.mean_squared_error(validY, yHatValidRidge)
        ERMSE = sklearn.metrics.mean_squared_error(testY, yHatTestRidge)
        
        trainRidgeMSE.append(TRMSE)
        validRidgeMSE.append(VRMSE)
        testRidgeMSE.append(ERMSE)
    
        indexMSE = validRidgeMSE.index(min(validRidgeMSE))
        bestAlpha = allAlpha[indexMSE]
    minR = np.log(bestAlpha) + offset
    maxR = np.log(bestAlpha) - offset
    offset = offset/5.0

#--------------------------------------
#            RIDGE LARGE RESID
#--------------------------------------
bins = 10
trainResids = np.abs(yHatTrainRidge-trainY)
testResids = np.abs(yHatTestRidge-testY)
validResids = np.abs(yHatValidRidge-validY)
plt.hist(trainResids, bins=bins, histtype='stepfilled', normed=True, color='b', label="Train")
plt.hist(testResids, bins=bins, histtype='stepfilled', normed=True, color='g', alpha=0.6, label="Test")
plt.hist(validResids, bins=bins, histtype='stepfilled', normed=True, color= 'r', alpha=0.5, label="Valid")

plt.title("Large Ridge Residual Histogram")
plt.xlabel("Residual")
plt.ylabel("Frequency")
plt.legend()
plt.savefig('RidgeResiduals_{}.pdf'.format(j), format = 'pdf')

##--------------------------------------
##           LASSO SMALL
##--------------------------------------
#    
# LASSO Regression SMALL
tol = .0001
sTrainLassoMSE = []
sValidLassoMSE = []
sTestLassoMSE = []
allAlpha = []
minR = -3
maxR = 3

for r in np.linspace(maxR,minR,100):
    
        currentAlpha = np.exp(r)
        allAlpha.append(currentAlpha)
        clf = linear_model.Lasso(alpha = currentAlpha).fit(sTrainX, sTrainY)
        
        sYHatTrainLasso = clf.predict(sTrainX)
        sYHatValidLasso = clf.predict(sValidX)
        sYHatTestLasso = clf.predict(sTestX)
        
        STLMSE = sklearn.metrics.mean_squared_error(sTrainY, sYHatTrainLasso)
        SVLMSE = sklearn.metrics.mean_squared_error(sValidY, sYHatValidLasso)
        SELMSE = sklearn.metrics.mean_squared_error(sTestY, sYHatTestLasso)
        
        sTrainLassoMSE.append(STLMSE)
        sValidLassoMSE.append(SVLMSE)
        sTestLassoMSE.append(SELMSE)
            
        indexMSE = sValidLassoMSE.index(min(sValidLassoMSE))
        bestAlpha = allAlpha[indexMSE]
plt.plot(allAlpha, sTrainLassoMSE, label='Train')
plt.plot(allAlpha, sTestLassoMSE, label = 'Test')
plt.plot(allAlpha, sValidLassoMSE, label = 'Valid')
plt.title('Small Lasso Regression')
plt.xlabel('Alpha')
plt.ylabel('MSE')
plt.legend()
plt.savefig('SmallLassoMSE_{}.pdf'.format(j), format = 'pdf')
plt.show()

offset = 1.0
while np.abs(maxR-minR)>tol:
    for r in np.linspace(maxR,minR,100):
    
        currentAlpha = np.exp(r)
        allAlpha.append(currentAlpha)
        clf = linear_model.Lasso(alpha = currentAlpha).fit(sTrainX, sTrainY)
        
        sYHatTrainLasso = clf.predict(sTrainX)
        sYHatValidLasso = clf.predict(sValidX)
        sYHatTestLasso = clf.predict(sTestX)
        
        STLMSE = sklearn.metrics.mean_squared_error(sTrainY, sYHatTrainLasso)
        SVLMSE = sklearn.metrics.mean_squared_error(sValidY, sYHatValidLasso)
        SELMSE = sklearn.metrics.mean_squared_error(sTestY, sYHatTestLasso)
        
        sTrainLassoMSE.append(STLMSE)
        sValidLassoMSE.append(SVLMSE)
        sTestLassoMSE.append(SELMSE)
            
        indexMSE = sValidLassoMSE.index(min(sValidLassoMSE))
        bestAlpha = allAlpha[indexMSE]
    minR = np.log(bestAlpha) + offset
    maxR = np.log(bestAlpha) - offset
    offset = offset/5.0
#    
##-------------------------------------------
##           SMALL LASSO RESID
##___________________________________________    
bins = 5

# Small Dataset
sTrainResids = np.abs(sYHatTrainLasso-sTrainY)
plt.hist(sTrainResids, bins=bins, histtype='stepfilled', normed=True, color='b')
plt.title("Small Lasso Train Residual Histogram")
plt.xlabel("Residual")
plt.ylabel("Frequency")
plt.savefig('sLassoTrainResiduals_{}.pdf'.format(j), format='pdf')
plt.show()

sTestResids = np.abs(sYHatTestLasso-sTestY)
plt.hist(sTestResids, bins=bins, histtype='stepfilled', normed=True, color='g')
plt.title("Small Lasso Test Residual Histogram")
plt.xlabel("Residual")
plt.ylabel("Frequency")
plt.savefig('sLassoTestResiduals_{}.pdf'.format(j), format='pdf')
plt.show()

sValidResids = np.abs(sYHatValidLasso-sValidY)
plt.hist(sValidResids, bins=bins, histtype='stepfilled', normed=True, color='r')
plt.title("Small Lasso Valid Residual Histogram")
plt.xlabel("Residual")
plt.ylabel("Frequency")
plt.savefig('sLassoValidResiduals_{}.pdf'.format(j), format='pdf')
plt.show()
    
#--------------------------------------
#           LASSO LARGE
#--------------------------------------
    
# LASSO Regression LARGE
tol = .0001
trainLassoMSE = []
validLassoMSE = []
testLassoMSE = []
allAlpha = []
minR = -3
maxR = 3

for r in np.linspace(maxR,minR,100):
    
        currentAlpha = np.exp(r)
        allAlpha.append(currentAlpha)
        clf = linear_model.Lasso(alpha = currentAlpha).fit(trainX, trainY)
        
        yHatTrainLasso = clf.predict(trainX)
        yHatValidLasso = clf.predict(validX)
        yHatTestLasso = clf.predict(testX)
        
        TLMSE = sklearn.metrics.mean_squared_error(trainY, yHatTrainLasso)
        VLMSE = sklearn.metrics.mean_squared_error(validY, yHatValidLasso)
        ELMSE = sklearn.metrics.mean_squared_error(testY, yHatTestLasso)
        
        trainLassoMSE.append(TLMSE)
        validLassoMSE.append(VLMSE)
        testLassoMSE.append(ELMSE)
            
        indexMSE = validLassoMSE.index(min(validLassoMSE))
        bestAlpha = allAlpha[indexMSE]
plt.plot(allAlpha, trainLassoMSE, label='Train')
plt.plot(allAlpha, testLassoMSE, label = 'Test')
plt.plot(allAlpha, validLassoMSE, label = 'Valid')
plt.title('Large Lasso Regression')
plt.xlabel('Alpha')
plt.ylabel('MSE')
plt.legend()
plt.savefig('LargeLassoMSE_{}.pdf'.format(j), format = 'pdf')
plt.show()

offset = 1.0
while np.abs(maxR-minR)>tol:
    for r in np.linspace(maxR,minR,100):
    
        currentAlpha = np.exp(r)
        allAlpha.append(currentAlpha)
        clf = linear_model.Lasso(alpha = currentAlpha).fit(trainX, trainY)
        
        yHatTrainLasso = clf.predict(trainX)
        yHatValidLasso = clf.predict(validX)
        yHatTestLasso = clf.predict(testX)
        
        TLMSE = sklearn.metrics.mean_squared_error(trainY, yHatTrainLasso)
        VLMSE = sklearn.metrics.mean_squared_error(validY, yHatValidLasso)
        ELMSE = sklearn.metrics.mean_squared_error(testY, yHatTestLasso)
        
        trainLassoMSE.append(TLMSE)
        validLassoMSE.append(VLMSE)
        testLassoMSE.append(ELMSE)
            
        indexMSE = validLassoMSE.index(min(validLassoMSE))
        bestAlpha = allAlpha[indexMSE]
    minR = np.log(bestAlpha) + offset
    maxR = np.log(bestAlpha) - offset
    offset = offset/5.0
    
#--------------------------------------
#            LASSO LARGE RESID
#--------------------------------------
bins = 10
trainResids = np.abs(yHatTrainLasso-trainY)
testResids = np.abs(yHatTestLasso-testY)
validResids = np.abs(yHatValidLasso-validY)
plt.hist(trainResids, bins=bins, histtype='stepfilled', normed=True, color='b', label="Train")
plt.hist(testResids, bins=bins, histtype='stepfilled', normed=True, color='g', alpha=0.6, label="Test")
plt.hist(validResids, bins=bins, histtype='stepfilled', normed=True, color= 'r', alpha=0.5, label="Valid")

plt.title("Large Lasso Residual Histogram")
plt.xlabel("Residual")
plt.ylabel("Frequency")
plt.legend()
plt.savefig('LASSOResiduals_{}.pdf'.format(j), format = 'pdf')
    
#----------------------------------------
#       LARGE ELASTIC
#----------------------------------------
    
## ELASTIC Regression
#tol = .01
#trainElasticMSE = []
#validElasticMSE = []
#testElasticMSE = []
#allAlpha = []
#allRho = []
#minR = -5
#maxR = 5
#minRho = 0
#maxRho = 1
#offsetAlpha = 1.0
#offsetRho = 0.2    
#
#for rho in np.linspace(minRho,maxRho,25):
#    for r in np.linspace(maxR,minR,10):
#            currentRho = rho
#            currentAlpha = np.exp(r)
#            allAlpha.append(currentAlpha)
#            allRho.append(currentRho)
#            clf = linear_model.ElasticNet(alpha = .05, l1_ratio = .5).fit(trainX, trainY)
#            yHatTrainElastic = clf.predict(trainX)
#            yHatValidElastic = clf.predict(validX)
#            yHatTestElastic = clf.predict(testX)
#            TEMSE = sklearn.metrics.mean_squared_error(trainY, yHatTrainElastic)
#            VEMSE = sklearn.metrics.mean_squared_error(validY, yHatValidElastic)
#            EEMSE = sklearn.metrics.mean_squared_error(testY, yHatTestElastic)
#            trainElasticMSE.append(TEMSE)        
#            validElasticMSE.append(VEMSE)
#            testElasticMSE.append(EEMSE)
#        
#            indexMSE = validElasticMSE.index(min(validElasticMSE))
#            bestAlpha = allAlpha[indexMSE]
#            bestRho = allRho[indexMSE]
#            minR = np.log(bestAlpha) + offsetAlpha
#            maxR = np.log(bestAlpha) - offsetAlpha
#            minRho = bestRho + offsetRho
#            maxRho = bestRho - offsetRho
#    
#plt.plot(allAlpha, trainElasticMSE, label='Train')
#plt.plot(allAlpha, testElasticMSE, label = 'Test')
#plt.plot(allAlpha, validElasticMSE, label = 'Valid')
#plt.title('Large ELASTIC Regression')
#plt.xlabel('Alpha')
#plt.ylabel('MSE')
#plt.legend()
#plt.savefig('LargeElasticMSE_{}.pdf'.format(j), format = 'pdf')
#
#while np.abs(maxR-minR)>tol:    
#    for rho in np.linspace(minRho,maxRho,25):
#        for r in np.linspace(maxR,minR,10):
#            currentRho = rho
#            currentAlpha = np.exp(r)
#            allAlpha.append(currentAlpha)
#            allRho.append(currentRho)
#            clf = linear_model.ElasticNet(alpha = .05, l1_ratio = .5).fit(trainX, trainY)
#            yHatTrainElastic = clf.predict(trainX)
#            yHatValidElastic = clf.predict(validX)
#            yHatTestElastic = clf.predict(testX)
#            TEMSE = sklearn.metrics.mean_squared_error(trainY, yHatTrainElastic)
#            VEMSE = sklearn.metrics.mean_squared_error(validY, yHatValidElastic)
#            EEMSE = sklearn.metrics.mean_squared_error(testY, yHatTestElastic)
#            trainElasticMSE.append(TEMSE)        
#            validElasticMSE.append(VEMSE)
#            testElasticMSE.append(EEMSE)
#        
#            indexMSE = validElasticMSE.index(min(validElasticMSE))
#            bestAlpha = allAlpha[indexMSE]
#            bestRho = allRho[indexMSE]
#            minR = np.log(bestAlpha) + offsetAlpha
#            maxR = np.log(bestAlpha) - offsetAlpha
#            minRho = bestRho + offsetRho
#            maxRho = bestRho - offsetRho
    
        
        
