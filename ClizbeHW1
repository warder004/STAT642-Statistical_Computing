import matplotlib.pyplot as plt
import ImportSparse
import numpy as np
import DimReduct as DR

#IMPORT DATA
datasetname = ['ARCENE','MADELON']
settype = ['train', 'valid']
filetype = ['data', 'labels']

    
for i in datasetname:
    for j in settype:
        for k in filetype:
            vars()[str(i.lower()) +'_' +str(j) +'_' +str(k)] = np.loadtxt(i +"/" +i +"/" +i.lower() +"_" +j +'.' +k)
    
dexter_train_data = ImportSparse.ImportSparse('DEXTER', 'train', numcols = 20000)
dexter_train_labels = np.loadtxt('DEXTER\DEXTER\dexter_train.labels')
dexter_valid_data = ImportSparse.ImportSparse('DEXTER', 'valid', numcols = 20000)
dexter_valid_labels = np.loadtxt('DEXTER\DEXTER\dexter_valid.labels')

datasets = ['arcene', 'dexter', 'madelon']
for h in datasets:
    X_train = vars()[str(h)+'_train_data']
    Y_train = vars()[str(h)+'_train_labels']
    X_valid = vars()[str(h)+'_valid_data']
    Y_valid = vars()[str(h)+'_valid_labels']
    cnum = 100

#GRP REDUCT
    grid_scores, cm, best_params = DR.GRPReduct(X_train, X_valid, Y_train, Y_valid, cnum)
    #Extract data from grid_scores
    dicts = []
    for i in range(0,len(grid_scores)):
        vars()['dict'+str(i)] = grid_scores[i]._asdict()
        dicts.append(vars()['dict'+str(i)])
        scores = []
        for j in dicts:
            scores.append([j['parameters']['decomp__n_components'],j['mean_validation_score']])

    #Graph scores vs. n_components
    plt.scatter(*zip(*scores))
    plt.xlabel('Number of Components')
    plt.ylabel('CV Score')
    plt.title('GRP_{}'.format(h))
    plt.savefig('GRP_{}'.format(h), format='pdf')
    plt.show()
    vars()['GRP_'+str(h)+'_grid_scores'] = grid_scores
    vars()['GRP_'+str(h)+'_cm'] = cm
    vars()['GRP_'+str(h)+'_best_params'] = best_params

#TSVD REDUCT
    grid_scores, cm, best_params = DR.TSVDReduct(X_train, X_valid, Y_train, Y_valid, cnum)
    #Extract data from grid_scores
    dicts = []
    for i in range(0,len(grid_scores)):
        vars()['dict'+str(i)] = grid_scores[i]._asdict()
        dicts.append(vars()['dict'+str(i)])
        scores = []
        for j in dicts:
            scores.append([j['parameters']['decomp__n_components'],j['mean_validation_score']])

    #Graph scores vs. n_components
    plt.scatter(*zip(*scores))
    plt.xlabel('Number of Components')
    plt.ylabel('CV Score')
    plt.title('TSVD_{}'.format(h))
    plt.savefig('TVSD_{}'.format(h), format='pdf')
    plt.show()
    vars()['TSVD_'+str(h)+'_grid_scores'] = grid_scores
    vars()['TSVD_'+str(h)+'_cm'] = cm
    vars()['TSVD_'+str(h)+'_best_params'] = best_params
    
#NMF REDUCT
    grid_scores, cm, best_params = DR.NMFReduct(X_train, X_valid, Y_train, Y_valid, cnum)
    #Extract data from grid_scores
    dicts = []
    for i in range(0,len(grid_scores)):
        vars()['dict'+str(i)] = grid_scores[i]._asdict()
        dicts.append(vars()['dict'+str(i)])
        scores = []
        for j in dicts:
            scores.append([j['parameters']['decomp__n_components'],j['mean_validation_score']])

    #Graph scores vs. n_components
    plt.scatter(*zip(*scores))
    plt.xlabel('Number of Components')
    plt.ylabel('CV Score')
    plt.title('NMF_{}'.format(h))
    plt.savefig('NMF_{}'.format(h), format='pdf')
    plt.show()
    vars()['NMF_'+str(h)+'_grid_scores'] = grid_scores
    vars()['NMF_'+str(h)+'_cm'] = cm
    vars()['NMF_'+str(h)+'_best_params'] = best_params

#ICA REDUCT
    grid_scores, cm, best_params = DR.ICAReduct(X_train, X_valid, Y_train, Y_valid, cnum)
    #Extract data from grid_scores
    dicts = []
    for i in range(0,len(grid_scores)):
        vars()['dict'+str(i)] = grid_scores[i]._asdict()
        dicts.append(vars()['dict'+str(i)])
        scores = []
        for j in dicts:
            scores.append([j['parameters']['decomp__n_components'],j['mean_validation_score']])

    #Graph scores vs. n_components
    plt.scatter(*zip(*scores))
    plt.xlabel('Number of Components')
    plt.ylabel('CV Score')
    plt.title('ICA_{}'.format(h))
    plt.savefig('ICA_{}'.format(h), format='pdf')
    plt.show()
    vars()['ICA_'+str(h)+'_grid_scores'] = grid_scores
    vars()['ICA_'+str(h)+'_cm'] = cm
    vars()['ICA_'+str(h)+'_best_params'] = best_params

